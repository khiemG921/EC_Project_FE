{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/giakhiem/Documents/EC_Project_FE/lib/firebase.ts"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);"],"names":[],"mappings":";;;AAIU;AAJV;AAAA;AACA;AAAA;;;AAEA,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;AACX;AAEA,MAAM,MAAM,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE;AACnB,MAAM,OAAO,CAAA,GAAA,6MAAA,CAAA,UAAO,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["file:///home/giakhiem/Documents/EC_Project_FE/lib/authClient.ts"],"sourcesContent":["import {\n  signInWithEmailAndPassword,\n  GoogleAuthProvider,\n  signInWithPopup,\n  signOut,\n  sendPasswordResetEmail,\n  User,\n  createUserWithEmailAndPassword,\n  updateProfile,\n} from \"firebase/auth\";\nimport { auth } from \"./firebase\";\n\n// Base URL cho backend API\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL;\n\n// Xác thực mã đăng ký tài khoản\nexport async function verifyRegisterCode(email: string, code: string) {\n  const response = await fetch(`${API_BASE_URL}/api/auth/verify-register-code`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ email, code }),\n  });\n  if (!response.ok) throw new Error(\"Mã xác thực không đúng hoặc hết hạn\");\n  return response.json();\n}\n\n// Đăng ký user với email và mật khẩu\nexport async function registerUser(email: unknown, password: unknown, name?: string, phone?: string) {\n  const emailStr = String(email).trim();\n  const passwordStr = String(password).trim();\n  const nameStr = name ? String(name).trim() : '';\n  const phoneStr = phone ? String(phone).trim() : '';\n  \n  console.log('Starting registration for:', emailStr);\n  \n  try {\n    // Gọi backend để đăng ký - backend sẽ tạo Firebase user và gửi OTP\n    const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ \n        email: emailStr, \n        password: passwordStr,\n        name: nameStr,\n        phone: phoneStr\n      }),\n      credentials: \"include\",\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || \"Đăng ký thất bại\");\n    }\n    \n    const result = await response.json();\n    console.log('Registration response:', result);\n    return result;\n    \n  } catch (error) {\n    console.error('Registration failed:', error);\n    throw error;\n  }\n}\n\n// Đăng nhập user với email và mật khẩu\nexport async function loginUser(email: unknown, password: unknown) {\n  const emailStr = String(email).trim();\n  const passwordStr = String(password).trim();\n  \n  console.log('Login attempt for:', emailStr);\n  \n  try {\n    // Đăng nhập Firebase\n    const result = await signInWithEmailAndPassword(auth, emailStr, passwordStr);\n    console.log('Firebase login successful:', result.user.uid);\n    \n    const idToken = await result.user.getIdToken();\n    console.log('Got Firebase token:', idToken.substring(0, 20) + '...');\n    \n    // Lưu session vào backend\n    await saveSession(idToken);\n    console.log('Session saved successfully');\n    \n    return idToken;\n  } catch (error) {\n    console.error('Login failed:', error);\n    throw error;\n  }\n}\n\n// Đăng nhập với Google\nexport async function loginWithGoogle() {\n  const provider = new GoogleAuthProvider();\n  const result = await signInWithPopup(auth, provider);\n  const user = result.user;\n  const idToken = await user.getIdToken();\n  \n  // Kiểm tra xem user đã có trong database chưa\n  // Nếu chưa thì tạo mới (tương tự register)\n  try {\n    // Thử verify token trước\n    await saveSession(idToken);\n    const userData = await verifyToken();\n    \n    if (!userData || !userData.user) {\n      // User chưa có trong database, tạo mới\n      await registerGoogleUser({\n        email: user.email!,\n        name: user.displayName || user.email!,\n        avatar: user.photoURL || '',\n        firebaseId: user.uid\n      });\n      \n      // Lưu session lại sau khi tạo user\n      await saveSession(idToken);\n    }\n  } catch (error) {\n    console.error('Google login error:', error);\n    throw error;\n  }\n  \n  return idToken;\n}\n\n// Helper function để đăng ký user từ Google\nasync function registerGoogleUser(userData: {\n  email: string;\n  name: string; \n  avatar: string;\n  firebaseId: string;\n}) {\n  const response = await fetch(`${API_BASE_URL}/api/auth/google-register`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(userData),\n    credentials: \"include\",\n  });\n  \n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || \"Đăng ký Google thất bại\");\n  }\n  return response.json();\n}\n\n// Đăng xuất user\nexport async function logoutUser() {\n  try {\n    // Xóa session từ backend\n    await fetch(`${API_BASE_URL}/api/auth/session`, {\n      method: \"DELETE\",\n      credentials: \"include\",\n    });\n    // Đăng xuất khỏi Firebase\n    await signOut(auth);\n  } catch (error) {\n    console.error(\"Logout error:\", error);\n    throw error;\n  }\n}\n\n// Force logout - clear tất cả auth state\nexport async function forceLogout() {\n  try {\n    // Clear backend session\n    await fetch(`${API_BASE_URL}/api/auth/force-logout`, {\n      method: \"POST\",\n      credentials: \"include\",\n    });\n    \n    // Clear Firebase auth\n    await signOut(auth);\n    \n    // Clear local storage\n    if (typeof window !== 'undefined') {\n      localStorage.clear();\n      \n      // Clear all cookies\n      document.cookie.split(\";\").forEach((c) => {\n        const eqPos = c.indexOf(\"=\");\n        const name = eqPos > -1 ? c.substr(0, eqPos) : c;\n        document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/\";\n      });\n    }\n  } catch (error) {\n    console.error(\"Force logout error:\", error);\n    // Vẫn clear local state\n    if (typeof window !== 'undefined') {\n      localStorage.clear();\n    }\n  }\n}\n\n// Lưu session vào backend\nexport async function saveSession(idToken: string) {\n  console.log('Saving session with token:', idToken.substring(0, 20) + '...');\n  \n  const response = await fetch(`${API_BASE_URL}/api/auth/session`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ idToken }),\n    credentials: \"include\",\n  });\n  \n  console.log('Save session response status:', response.status);\n  \n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error('Save session failed:', errorText);\n    throw new Error(\"Failed to save session\");\n  }\n  \n  const result = await response.json();\n  console.log('Session saved successfully:', result);\n  return result;\n}\n\n// Verify token và lấy thông tin user từ backend\nexport async function verifyToken() {\n  try {\n    // Lấy Firebase token nếu user đã đăng nhập\n    let headers: HeadersInit = {};\n    \n    console.log('VerifyToken: Starting verification...');\n    console.log('VerifyToken: auth.currentUser:', !!auth.currentUser);\n    \n    if (auth.currentUser) {\n      try {\n        const token = await auth.currentUser.getIdToken();\n        headers['Authorization'] = `Bearer ${token}`;\n        console.log('VerifyToken: Got Firebase token, length:', token.length);\n      } catch (tokenError) {\n        console.log('VerifyToken: Could not get Firebase token:', tokenError);\n        // Tiếp tục mà không có token, có thể dựa vào cookie\n      }\n    } else {\n      console.log('VerifyToken: No Firebase user logged in');\n    }\n    \n    console.log('VerifyToken: Making request to backend...');\n    const response = await fetch(`${API_BASE_URL}/api/auth/verify`, {\n      method: \"GET\",\n      headers,\n      credentials: \"include\",\n    });\n    \n    console.log('VerifyToken: Response status:', response.status);\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      console.log('VerifyToken: Error response:', errorData);\n      if (response.status === 401) {\n        throw new Error(errorData.error || \"No authentication token\");\n      }\n      throw new Error(\"Failed to verify token\");\n    }\n    \n    const result = await response.json();\n    console.log('VerifyToken: Success, got user:', !!result.user);\n    return result;\n  } catch (networkError) {\n    // Handle network errors gracefully\n    if (networkError instanceof TypeError && networkError.message.includes('fetch')) {\n      throw new Error(\"Network error - cannot reach authentication server\");\n    }\n    throw networkError;\n  }\n}\n\n// Lấy thông tin dashboard từ backend\nexport async function getDashboardData() {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/dashboard`, {\n      method: \"GET\",\n      credentials: \"include\",\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch dashboard data\");\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Dashboard fetch error:\", error);\n    throw error;\n  }\n}\n\n// Sync user với database\nexport async function syncUserToDatabase(firebaseUser: User) {\n  try {\n    console.log('Syncing user to database:', firebaseUser.uid);\n    const token = await firebaseUser.getIdToken();\n    console.log('Got Firebase token for sync');\n    \n    const response = await fetch(`${API_BASE_URL}/api/auth/sync-user`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`,\n      },\n      credentials: \"include\",\n      body: JSON.stringify({\n        uid: firebaseUser.uid,\n        email: firebaseUser.email,\n        displayName: firebaseUser.displayName,\n      }),\n    });\n    \n    console.log('Sync response status:', response.status);\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('User sync failed:', {\n        status: response.status,\n        error: errorData\n      });\n      return null;\n    }\n    \n    const data = await response.json();\n    console.log('User sync successful:', {\n      hasUser: !!data.user,\n      userId: data.user?.id,\n      userName: data.user?.name\n    });\n    return data;\n  } catch (error) {\n    console.error(\"User sync network error:\", error);\n    return null;\n  }\n}\n\n// Gửi mã xác thực về email\nexport async function sendResetCode(email: string) {\n  const res = await fetch(`${API_BASE_URL}/api/forgot-password/send-reset-code`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email }),\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return res.json();\n}\n\n// Xác thực code\nexport async function verifyResetCode(email: string, code: string) {\n  const response = await fetch(`${API_BASE_URL}/api/forgot-password/verify-reset-code`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ email, code }),\n  });\n  if (!response.ok) throw new Error(\"Mã xác thực không đúng hoặc hết hạn\");\n  return response.json(); // { token }\n}\n\n// Đổi mật khẩu\nexport async function resetPassword(email: string, token: string, password: string) {\n  const response = await fetch(`${API_BASE_URL}/api/forgot-password/reset-password`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ email, token, password }),\n  });\n  if (!response.ok) throw new Error(\"Không thể đổi mật khẩu\");\n  return response.json();\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 381, "column": 0}, "map": {"version":3,"sources":["file:///home/giakhiem/Documents/EC_Project_FE/providers/auth_provider.tsx"],"sourcesContent":["\"use client\";\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User } from '../types/user';\nimport { verifyToken, logoutUser } from '../lib/authClient';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { auth } from '../lib/firebase';\n\ntype AuthContextType = {\n  user: User | null;\n  loading: boolean;\n  login: (userData: User, token: string) => void;\n  logout: () => void;\n  refreshUser: () => Promise<void>;\n};\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [mounted, setMounted] = useState(false);\n\n  // Đảm bảo component đã mount trên client\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Helper function để clear invalid tokens\n  const clearInvalidAuth = () => {\n    if (typeof window !== 'undefined') {\n      // Clear cookie\n      document.cookie = 'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n      // Clear localStorage if any\n      localStorage.removeItem('token');\n    }\n    setUser(null);\n  };\n\n  // Theo dõi trạng thái auth từ Firebase\n  useEffect(() => {\n    if (!mounted) return; // Chỉ chạy khi đã mounted trên client\n\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      console.log('Firebase auth state changed:', firebaseUser ? 'logged in' : 'logged out');\n      \n      // Check if we're on auth pages (login/register) to avoid unnecessary token verification\n      const isAuthPage = typeof window !== 'undefined' && \n        (window.location.pathname.includes('/auth/') || \n         window.location.pathname.includes('/register') || \n         window.location.pathname.includes('/login'));\n      \n      if (firebaseUser) {\n        try {\n          // Đảm bảo Firebase user đã được authenticate hoàn toàn\n          const idToken = await firebaseUser.getIdToken(false);\n          if (!idToken) {\n            console.log('No valid ID token available');\n            setUser(null);\n            setLoading(false);\n            return;\n          }\n\n          // Verify token và lấy thông tin user từ backend\n          const userData = await verifyToken();\n          // console.log('User data from backend:', userData);\n          \n          if (userData && userData.user) {\n            setUser(userData.user);\n          } else {\n            console.log('No user data from backend, attempting to sync...');\n            \n            // Thử sync user từ Firebase sang database\n            try {\n              const syncResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/sync-user`, {\n                method: 'POST',\n                credentials: 'include'\n              });\n              \n              if (syncResponse.ok) {\n                console.log('User synced successfully, retrying verification...');\n                const retryUserData = await verifyToken();\n                if (retryUserData && retryUserData.user) {\n                  setUser(retryUserData.user);\n                } else {\n                  console.log('Still no user data after sync, clearing auth');\n                  clearInvalidAuth();\n                }\n              } else {\n                console.log('Sync failed, clearing invalid auth');\n                clearInvalidAuth();\n              }\n            } catch (syncError) {\n              console.error('Sync error:', syncError);\n              clearInvalidAuth();\n            }\n          }\n        } catch (error) {\n          // Chỉ log error, không throw để tránh crash UI\n          console.log('Auth verification issue:', error instanceof Error ? error.message : 'Unknown error');\n          \n          // Xử lý các loại lỗi khác nhau\n          if (error instanceof Error) {\n            if (error.message.includes('No token') || error.message.includes('No authentication')) {\n              console.log('User not authenticated - normal for registration/login pages');\n              setUser(null);\n            } else if (error.message === 'Failed to verify token') {\n              console.log('Token verification failed - clearing invalid auth');\n              clearInvalidAuth();\n            } else {\n              console.log('Other authentication error:', error.message);\n              setUser(null);\n            }\n          } else {\n            console.log('Unknown authentication error');\n            setUser(null);\n          }\n        }\n      } else {\n        console.log('No firebase user, clearing auth');\n        clearInvalidAuth();\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [mounted]); // Depend on mounted state\n\n  // Hàm login - nhận user data và token từ login form\n  const login = (userData: User, token: string) => {\n    // Lưu token vào localStorage hoặc cookie\n    localStorage.setItem('token', token);\n    setUser(userData);\n  };\n\n  // Hàm logout\n  const logout = async () => {\n    try {\n      await logoutUser();\n      clearInvalidAuth();\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Vẫn clear local state nếu có lỗi\n      clearInvalidAuth();\n    }\n  };\n\n  // Hàm refresh user data từ backend\n  const refreshUser = async () => {\n    try {\n      const userData = await verifyToken();\n      if (userData && userData.user) {\n        setUser(userData.user);\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      console.error('Error refreshing user:', error);\n      setUser(null);\n    }\n  };\n\n  // Render nothing until mounted to avoid hydration mismatch\n  if (!mounted) {\n    return (\n      <AuthContext.Provider value={{ user: null, loading: true, login, logout, refreshUser }}>\n        {children}\n      </AuthContext.Provider>\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, loading, login, logout, refreshUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 590, "column": 0}, "map": {"version":3,"sources":["file:///home/giakhiem/Documents/EC_Project_FE/components/ClientProviders.tsx"],"sourcesContent":["'use client';\n\nimport { AuthProvider } from '@/providers/auth_provider';\n\nexport default function ClientProviders({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return <AuthProvider>{children}</AuthProvider>;\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS,gBAAgB,EACtC,QAAQ,EAGT;IACC,qBAAO,6LAAC,8HAAA,CAAA,eAAY;kBAAE;;;;;;AACxB;KANwB","debugId":null}}]
}